<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE wizard SYSTEM "Wizard.dtd">

<wizard>
	<plugin type="dialogos.plugin.tts">
	</plugin>
	<plugin type="dialogos.plugin.sphinx">
		<att name="language" type="string" value="en_US"/>
	</plugin>
	<graph directed="1" Graphic="1" Layout="points">
		<att name="width" type="integer" value="750"/>
		<att name="height" type="integer" value="540"/>
		<groovyFunctions></groovyFunctions>
		<grammar id="0ad839a8-5e24-42fe-a606-543c7cc74b99">
			<name>chained</name>
			<value>root $input;
// beware of the naive left-recursive solution (which DialogOS cannot parse).
// $input =
//    $zahl { $ = $zahl }
//  | $input plus  $zahl { $ = $input + $zahl } 
//  | $input minus $zahl { $ = $input - $zahl }
// ;
// instead, try the slightly more involved right-recursive solution:
$input = 
   $zahl { $zahl }
 | $zahl plus  $input    { $zahl + $input    }
 | $zahl minus $inputNeg { $zahl - $inputNeg }
;
$inputNeg =
   $zahl { $zahl }
 | $zahl plus  $inputNeg { $zahl - $inputNeg }
 | $zahl minus $input    { $zahl - $input    }
;

$zahl
 = zero  { $ = 0; }
 | one   { $ = 1; }
 | two   { $ = 2; }
 | three { $ = 3; }
 | four  { $ = 4; }
 | five  { $ = 5; }
 | six   { $ = 6; }
 | seven { $ = 7; }
 | eight { $ = 8; }
 | nine  { $ = 9; };</value>
		</grammar>
		<variable uid="f4d7975c-7485-4333-b468-4c57c3ada678">
			<name>myNumber</name>
			<type>int</type>
			<value>undefined</value>
		</variable>
		<node uid="316b8a1a-f221-4245-862f-b6450777b2e8" class="edu.cmu.lti.dialogos.sphinx.plugin.SphinxNode">
			<graphics x="593" y="162" fill="#b20000"/>
			<att name="title" type="string" value="Recognition"/>
			<att name="language" type="string" value="US English"/>
			<att name="grammar" type="string" value="0ad839a8-5e24-42fe-a606-543c7cc74b99"/>
		</node>
		<node uid="363966c2-1e0c-47a1-ae23-1c70e1adb659" class="de.saar.coli.dialogos.marytts.plugin.TTSNode">
			<graphics x="601" y="284" fill="#00b200"/>
			<att name="title" type="string" value="Synthesis"/>
			<att name="voice" type="string" value="cmu-slt-hsmm"/>
			<att name="prompt" type="text">
				<value>&quot;The result is &quot; + myNumber + &quot;.&quot;</value>
			</att>
			<att name="prompt_type" type="string" value="expression"/>
			<att name="wait" type="boolean" value="1"/>
		</node>
		<node uid="aba66558-fdcb-427d-9a5a-fb816aea775c" class="com.clt.diamant.graph.nodes.StartNode">
			<graphics x="607" y="47" fill="#9999ff"/>
			<att name="title" type="string" value="Start"/>
		</node>
		<node uid="c803399c-ad12-46bf-90ee-b60503f6ed18" class="com.clt.diamant.graph.nodes.EndNode">
			<graphics x="609" y="419" fill="#9999ff"/>
			<att name="title" type="string" value="Fin"/>
		</node>
		<edge src="316b8a1a-f221-4245-862f-b6450777b2e8" tgt="363966c2-1e0c-47a1-ae23-1c70e1adb659">
			<att name="condition" type="string" value="myNumber"/>
		</edge>
		<edge src="363966c2-1e0c-47a1-ae23-1c70e1adb659" tgt="c803399c-ad12-46bf-90ee-b60503f6ed18">
		</edge>
		<edge src="aba66558-fdcb-427d-9a5a-fb816aea775c" tgt="316b8a1a-f221-4245-862f-b6450777b2e8">
		</edge>
		<comment x="20" y="47" width="528" height="421" color="#ffff99">Click &quot;Run&quot; and say: &quot;one minus two plus three&quot;
DialogOS answers: &quot;The result is two&quot;

Of course, you can form much longer chains using all digits.

Under the hood:
* a recursive grammar is responsible for understanding what you say. 
* right-click the workspace, select &quot;Grammars...&quot; and look at the grammar &quot;chained&quot;.
* the additions/subtractions are performed in the semantic tags in the grammar
* the result is stored in a variable
* right-click the workspace, select &quot;Variables...&quot;. The variable is called &quot;myNumber&quot;.
* the recognition node stores the interpretation of the grammar into the variable
* the synthesis node combines &quot;The result is &quot; with the value of the variable. 
* notice the blank after &quot;is&quot;: this is needed to say &quot;is one&quot; not &quot;isone&quot;!


All digits work as well as addition and subtraction (see the comment in the grammar on left- vs. right-recursion and what that means for subtraction).
In the grammar, notice that the text of each digit has to be converted into the corresponding numerical value in the semantic tag: &quot;zero { $ = 0 }&quot;.

It is a nice exercise to extend this to larger numbers 
(ten, eleven, twelve thousand five hundred sixty seven, ...)

</comment>
	</graph>
</wizard>
